# Generated by Django 5.2.1 on 2025-06-07 02:19

import datetime
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Package",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("user_id", models.UUIDField()),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("short_description", models.CharField(blank=True, max_length=500)),
                ("slug", models.SlugField(blank=True, max_length=255)),
                (
                    "package_type",
                    models.CharField(
                        choices=[
                            ("equipment", "Equipment Bundle"),
                            ("service", "Service Bundle"),
                            ("mixed", "Equipment + Service"),
                            ("themed", "Themed Package"),
                        ],
                        default="equipment",
                        max_length=50,
                    ),
                ),
                (
                    "pricing_strategy",
                    models.CharField(
                        choices=[
                            ("discount", "Discount from Individual"),
                            ("fixed", "Fixed Package Price"),
                            ("calculated", "Dynamic Calculation"),
                        ],
                        default="discount",
                        max_length=20,
                    ),
                ),
                (
                    "package_price_daily",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "package_price_weekly",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                    ),
                ),
                (
                    "min_rental_duration",
                    models.DurationField(default=datetime.timedelta(days=1)),
                ),
                (
                    "max_rental_duration",
                    models.DurationField(default=datetime.timedelta(days=30)),
                ),
                ("max_concurrent_bookings", models.IntegerField(default=1)),
                ("advance_booking_days", models.IntegerField(default=365)),
                ("allow_item_substitution", models.BooleanField(default=False)),
                ("require_all_items", models.BooleanField(default=True)),
                ("allow_partial_booking", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=True)),
                ("promotional_text", models.CharField(blank=True, max_length=255)),
                ("total_bookings", models.IntegerField(default=0)),
                (
                    "total_revenue",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "average_rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("5.00")),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "packages",
            },
        ),
        migrations.CreateModel(
            name="ServiceCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("user_id", models.UUIDField()),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("color", models.CharField(default="#3B82F6", max_length=7)),
                ("icon", models.CharField(blank=True, max_length=50)),
                ("show_in_main_calendar", models.BooleanField(default=True)),
                ("calendar_order", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "category_type",
                    models.CharField(
                        choices=[
                            ("equipment", "Equipment"),
                            ("service", "Service"),
                            ("package", "Package"),
                            ("mixed", "Mixed"),
                        ],
                        default="mixed",
                        max_length=50,
                    ),
                ),
                (
                    "default_booking_duration",
                    models.DurationField(blank=True, null=True),
                ),
                ("max_advance_booking_days", models.IntegerField(default=365)),
                ("min_advance_booking_hours", models.IntegerField(default=24)),
                ("attribute_template", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="service_catalog.servicecategory",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Service Categories",
                "db_table": "service_categories",
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("user_id", models.UUIDField()),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("short_description", models.CharField(blank=True, max_length=500)),
                ("slug", models.SlugField(blank=True, max_length=255)),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("equipment", "Equipment Rental"),
                            ("consultation", "Consultation"),
                            ("delivery", "Delivery Service"),
                            ("setup", "Setup Service"),
                            ("training", "Training Session"),
                            ("maintenance", "Maintenance Service"),
                            ("package", "Service Package"),
                        ],
                        default="equipment",
                        max_length=50,
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "price_per_hour",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "price_per_day",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "price_per_week",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "availability_type",
                    models.CharField(
                        choices=[
                            ("unlimited", "Unlimited"),
                            ("limited", "Limited Quantity"),
                            ("unique", "Unique Item"),
                        ],
                        default="limited",
                        max_length=20,
                    ),
                ),
                ("quantity_available", models.IntegerField(default=1)),
                (
                    "min_booking_duration",
                    models.DurationField(default=datetime.timedelta(seconds=3600)),
                ),
                (
                    "max_booking_duration",
                    models.DurationField(default=datetime.timedelta(days=30)),
                ),
                (
                    "advance_booking_days",
                    models.IntegerField(
                        default=365,
                        help_text="Maximum days in advance that this service can be booked",
                    ),
                ),
                ("requires_approval", models.BooleanField(default=False)),
                ("specifications", models.JSONField(blank=True, default=dict)),
                ("brand", models.CharField(blank=True, max_length=100)),
                ("model", models.CharField(blank=True, max_length=100)),
                ("serial_number", models.CharField(blank=True, max_length=100)),
                (
                    "condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("excellent", "Excellent"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                        ],
                        max_length=20,
                    ),
                ),
                ("requires_deposit", models.BooleanField(default=False)),
                (
                    "deposit_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                ("insurance_required", models.BooleanField(default=False)),
                (
                    "insurance_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                ("is_mobile_service", models.BooleanField(default=False)),
                ("travel_radius_km", models.IntegerField(blank=True, null=True)),
                ("setup_time_minutes", models.IntegerField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=True)),
                ("search_tags", models.JSONField(blank=True, default=list)),
                ("promotional_text", models.CharField(blank=True, max_length=255)),
                ("total_bookings", models.IntegerField(default=0)),
                (
                    "total_revenue",
                    models.DecimalField(decimal_places=2, default=0, max_digits=12),
                ),
                (
                    "average_rating",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("5.00")),
                        ],
                    ),
                ),
                ("last_maintenance_date", models.DateTimeField(blank=True, null=True)),
                ("next_maintenance_due", models.DateTimeField(blank=True, null=True)),
                (
                    "maintenance_interval_days",
                    models.IntegerField(blank=True, null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(
                        blank=True, null=True
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="service_catalog.servicecategory",
                    ),
                ),
            ],
            options={
                "db_table": "services",
            },
        ),
        migrations.CreateModel(
            name="PackageItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                ("is_optional", models.BooleanField(default=False)),
                ("display_order", models.IntegerField(default=0)),
                ("substitution_allowed", models.BooleanField(default=False)),
                (
                    "custom_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Override individual service price for this package",
                        max_digits=10,
                        null=True,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "package",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="package_items",
                        to="service_catalog.package",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="service_catalog.service",
                    ),
                ),
                (
                    "substitution_category",
                    models.ForeignKey(
                        blank=True,
                        help_text="Allow substitution within this category",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="service_catalog.servicecategory",
                    ),
                ),
            ],
            options={
                "db_table": "package_items",
            },
        ),
        migrations.AddField(
            model_name="package",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="packages",
                to="service_catalog.servicecategory",
            ),
        ),
        migrations.AddIndex(
            model_name="servicecategory",
            index=models.Index(
                fields=["user_id", "is_active", "calendar_order"],
                name="service_cat_user_id_59883a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="servicecategory",
            index=models.Index(
                fields=["parent_category", "calendar_order"],
                name="service_cat_parent__0e560d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="servicecategory",
            index=models.Index(
                fields=["category_type", "is_active"],
                name="service_cat_categor_9ecdb3_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="servicecategory",
            unique_together={("user_id", "name")},
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["user_id", "category", "is_active"],
                name="services_user_id_aac5f9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["service_type", "is_active", "is_public"],
                name="services_service_796056_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["is_featured", "is_active"], name="services_is_feat_30fbaf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["brand", "model"], name="services_brand_fd5a4b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["availability_type", "quantity_available"],
                name="services_availab_738cc6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="services_search__44631e_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["total_revenue", "total_bookings"],
                name="services_total_r_8ca947_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="packageitem",
            index=models.Index(
                fields=["package", "display_order"],
                name="package_ite_package_fe7e87_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="packageitem",
            index=models.Index(
                fields=["service", "package"], name="package_ite_service_75f1b0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="packageitem",
            index=models.Index(
                fields=["substitution_category"], name="package_ite_substit_8754cb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="packageitem",
            unique_together={("package", "service")},
        ),
        migrations.AddIndex(
            model_name="package",
            index=models.Index(
                fields=["user_id", "category", "is_active"],
                name="packages_user_id_33a2e4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="package",
            index=models.Index(
                fields=["package_type", "is_active", "is_public"],
                name="packages_package_48e933_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="package",
            index=models.Index(
                fields=["is_featured", "is_active"], name="packages_is_feat_3935c9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="package",
            index=models.Index(
                fields=["total_revenue", "total_bookings"],
                name="packages_total_r_651699_idx",
            ),
        ),
    ]
