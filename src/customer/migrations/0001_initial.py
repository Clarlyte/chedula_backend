# Generated by Django 5.2.1 on 2025-06-07 02:19

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("user_id", models.UUIDField()),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                ("company", models.CharField(blank=True, max_length=200)),
                ("website", models.URLField(blank=True)),
                ("notes", models.TextField(blank=True)),
                ("address_line_1", models.CharField(blank=True, max_length=255)),
                ("address_line_2", models.CharField(blank=True, max_length=255)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("state", models.CharField(blank=True, max_length=100)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                ("country", models.CharField(blank=True, default="US", max_length=100)),
                (
                    "preferred_contact_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("sms", "SMS"),
                            ("both", "Email & Phone"),
                            ("any", "Any Method"),
                        ],
                        default="email",
                        max_length=20,
                    ),
                ),
                (
                    "customer_type",
                    models.CharField(
                        choices=[
                            ("individual", "Individual"),
                            ("business", "Business"),
                            ("organization", "Organization"),
                        ],
                        default="individual",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("prospective", "Prospective"),
                            ("blocked", "Blocked"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("total_bookings", models.IntegerField(default=0)),
                (
                    "total_spent",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "average_booking_value",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("last_booking_date", models.DateTimeField(blank=True, null=True)),
                ("email_notifications", models.BooleanField(default=True)),
                ("sms_notifications", models.BooleanField(default=False)),
                ("marketing_emails", models.BooleanField(default=True)),
                ("ai_created", models.BooleanField(default=False)),
                ("ai_session_id", models.UUIDField(blank=True, null=True)),
                ("ai_confidence_score", models.FloatField(blank=True, null=True)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("manual", "Manual Entry"),
                            ("ai_assistant", "AI Assistant"),
                            ("booking_link", "Booking Link"),
                            ("import", "Data Import"),
                            ("api", "API"),
                            ("referral", "Referral"),
                        ],
                        default="manual",
                        max_length=30,
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("is_vip", models.BooleanField(default=False)),
                ("internal_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_contact_date", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "customers",
                "indexes": [
                    models.Index(
                        fields=["user_id", "status"],
                        name="customers_user_id_74303f_idx",
                    ),
                    models.Index(fields=["email"], name="customers_email_92e882_idx"),
                    models.Index(
                        fields=["first_name", "last_name"],
                        name="customers_first_n_93c9ec_idx",
                    ),
                    models.Index(
                        fields=["company"], name="customers_company_7a5951_idx"
                    ),
                    models.Index(
                        fields=["customer_type", "status"],
                        name="customers_custome_f2ce7f_idx",
                    ),
                    models.Index(
                        fields=["last_booking_date"],
                        name="customers_last_bo_1b78be_idx",
                    ),
                    models.Index(
                        fields=["total_spent"], name="customers_total_s_f57146_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="customers_created_c63477_idx"
                    ),
                    models.Index(
                        fields=["ai_created", "source"],
                        name="customers_ai_crea_08d240_idx",
                    ),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("total_bookings__gte", 0)),
                        name="positive_total_bookings",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(("total_spent__gte", 0)),
                        name="positive_total_spent",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(("average_booking_value__gte", 0)),
                        name="positive_average_booking_value",
                    ),
                ],
                "unique_together": {("user_id", "email")},
            },
        ),
        migrations.CreateModel(
            name="CustomerNote",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("user_id", models.UUIDField()),
                ("title", models.CharField(blank=True, max_length=200)),
                ("content", models.TextField()),
                (
                    "note_type",
                    models.CharField(
                        choices=[
                            ("general", "General Note"),
                            ("call", "Phone Call"),
                            ("email", "Email"),
                            ("meeting", "Meeting"),
                            ("complaint", "Complaint"),
                            ("feedback", "Feedback"),
                            ("follow_up", "Follow Up"),
                            ("ai_generated", "AI Generated"),
                        ],
                        default="general",
                        max_length=20,
                    ),
                ),
                ("ai_generated", models.BooleanField(default=False)),
                ("ai_session_id", models.UUIDField(blank=True, null=True)),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                ("requires_follow_up", models.BooleanField(default=False)),
                ("follow_up_date", models.DateTimeField(blank=True, null=True)),
                ("follow_up_completed", models.BooleanField(default=False)),
                ("is_private", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customer_notes",
                        to="customer.customer",
                    ),
                ),
            ],
            options={
                "db_table": "customer_notes",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["customer", "created_at"],
                        name="customer_no_custome_10b379_idx",
                    ),
                    models.Index(
                        fields=["note_type", "created_at"],
                        name="customer_no_note_ty_deb544_idx",
                    ),
                    models.Index(
                        fields=["requires_follow_up", "follow_up_date"],
                        name="customer_no_require_fab473_idx",
                    ),
                    models.Index(
                        fields=["ai_generated", "ai_session_id"],
                        name="customer_no_ai_gene_a0adf2_idx",
                    ),
                ],
            },
        ),
    ]
