# Generated by Django 5.2.1 on 2025-06-07 02:19

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("customer", "0001_initial"),
        ("service_catalog", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CalendarSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_id", models.UUIDField(unique=True)),
                (
                    "default_view",
                    models.CharField(
                        choices=[
                            ("day", "Day View"),
                            ("week", "Week View"),
                            ("month", "Month View"),
                        ],
                        default="week",
                        max_length=20,
                    ),
                ),
                (
                    "week_start_day",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(6),
                        ],
                    ),
                ),
                ("business_hours_start", models.TimeField(default="08:00")),
                ("business_hours_end", models.TimeField(default="18:00")),
                ("show_weekends", models.BooleanField(default=True)),
                ("visible_categories", models.JSONField(blank=True, default=list)),
                (
                    "category_display_settings",
                    models.JSONField(blank=True, default=dict),
                ),
                (
                    "color_scheme",
                    models.CharField(
                        choices=[
                            ("category_based", "Color by Category"),
                            ("service_based", "Color by Service"),
                            ("status_based", "Color by Status"),
                            ("custom", "Custom Colors"),
                        ],
                        default="category_based",
                        max_length=50,
                    ),
                ),
                ("custom_colors", models.JSONField(blank=True, default=dict)),
                ("google_calendar_enabled", models.BooleanField(default=False)),
                ("google_calendar_id", models.CharField(blank=True, max_length=255)),
                (
                    "google_sync_direction",
                    models.CharField(
                        choices=[
                            ("both", "Two-way Sync"),
                            ("to_google", "To Google Only"),
                            ("from_google", "From Google Only"),
                            ("disabled", "Sync Disabled"),
                        ],
                        default="both",
                        max_length=20,
                    ),
                ),
                ("last_google_sync", models.DateTimeField(blank=True, null=True)),
                ("google_access_token", models.TextField(blank=True)),
                ("google_refresh_token", models.TextField(blank=True)),
                ("ai_booking_auto_confirm", models.BooleanField(default=False)),
                (
                    "ai_confidence_threshold",
                    models.FloatField(
                        default=0.8,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "ai_notification_preferences",
                    models.JSONField(blank=True, default=dict),
                ),
                ("conflict_notifications", models.BooleanField(default=True)),
                ("booking_reminders", models.BooleanField(default=True)),
                ("auto_resolve_minor_conflicts", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "calendar_settings",
            },
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("user_id", models.UUIDField()),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("all_day", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no_show", "No Show"),
                        ],
                        default="confirmed",
                        max_length=20,
                    ),
                ),
                (
                    "created_via",
                    models.CharField(
                        choices=[
                            ("manual", "Manual Entry"),
                            ("ai_assistant", "AI Assistant"),
                            ("booking_link", "Booking Link"),
                            ("api", "API"),
                        ],
                        default="manual",
                        max_length=20,
                    ),
                ),
                ("ai_session_id", models.UUIDField(blank=True, null=True)),
                ("ai_message_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "ai_confidence_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("color", models.CharField(blank=True, max_length=7)),
                ("google_event_id", models.CharField(blank=True, max_length=255)),
                ("google_calendar_id", models.CharField(blank=True, max_length=255)),
                ("recurrence_rule", models.TextField(blank=True)),
                (
                    "recurrence_exception_dates",
                    models.JSONField(blank=True, default=list),
                ),
                ("notes", models.TextField(blank=True)),
                ("conflict_resolution_notes", models.TextField(blank=True)),
                ("last_conflict_check", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookings",
                        to="customer.customer",
                    ),
                ),
                (
                    "parent_booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="calendar_mgmt.booking",
                    ),
                ),
            ],
            options={
                "db_table": "bookings",
            },
        ),
        migrations.CreateModel(
            name="BookingService",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.IntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "price_per_unit",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "service_status",
                    models.CharField(
                        choices=[
                            ("reserved", "Reserved"),
                            ("prepared", "Prepared"),
                            ("delivered", "Delivered"),
                            ("in_use", "In Use"),
                            ("returned", "Returned"),
                            ("damaged", "Damaged"),
                        ],
                        default="reserved",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("conflict_detected", models.BooleanField(default=False)),
                ("conflict_resolution", models.CharField(blank=True, max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="booking_services",
                        to="calendar_mgmt.booking",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_bookings",
                        to="service_catalog.service",
                    ),
                ),
            ],
            options={
                "db_table": "booking_services",
            },
        ),
        migrations.CreateModel(
            name="ConflictLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("user_id", models.UUIDField()),
                (
                    "conflict_type",
                    models.CharField(
                        choices=[
                            ("service_overlap", "Service/Equipment Overlap"),
                            ("time_conflict", "Time Conflict"),
                            ("availability_limit", "Availability Limit Exceeded"),
                            ("business_hours", "Outside Business Hours"),
                        ],
                        max_length=30,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "resolution_status",
                    models.CharField(
                        choices=[
                            ("detected", "Detected"),
                            ("resolved", "Resolved"),
                            ("ignored", "Ignored"),
                            ("escalated", "Escalated"),
                        ],
                        default="detected",
                        max_length=20,
                    ),
                ),
                ("resolution_notes", models.TextField(blank=True)),
                ("resolved_by", models.CharField(blank=True, max_length=50)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "affected_service",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="service_catalog.service",
                    ),
                ),
                (
                    "conflicting_booking",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="secondary_conflicts",
                        to="calendar_mgmt.booking",
                    ),
                ),
                (
                    "primary_booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="primary_conflicts",
                        to="calendar_mgmt.booking",
                    ),
                ),
            ],
            options={
                "db_table": "conflict_logs",
            },
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["user_id", "start_time", "end_time"],
                name="bookings_user_id_602dbc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["customer", "start_time"], name="bookings_custome_fce75f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["status", "start_time"], name="bookings_status_28164a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["ai_session_id"], name="bookings_ai_sess_0f0e51_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["parent_booking"], name="bookings_parent__90aa0e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["created_via", "created_at"], name="bookings_created_9e91d8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bookingservice",
            index=models.Index(
                fields=["service", "booking"], name="booking_ser_service_742af3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bookingservice",
            index=models.Index(
                fields=["conflict_detected"], name="booking_ser_conflic_f2db14_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="bookingservice",
            index=models.Index(
                fields=["service_status"], name="booking_ser_service_498b76_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="bookingservice",
            unique_together={("booking", "service")},
        ),
        migrations.AddIndex(
            model_name="conflictlog",
            index=models.Index(
                fields=["user_id", "created_at"], name="conflict_lo_user_id_057912_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conflictlog",
            index=models.Index(
                fields=["resolution_status", "severity"],
                name="conflict_lo_resolut_302c76_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="conflictlog",
            index=models.Index(
                fields=["primary_booking"], name="conflict_lo_primary_ec6833_idx"
            ),
        ),
    ]
